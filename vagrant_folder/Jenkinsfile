pipeline {
    agent any
    tools {
        maven "MAVEN3"
        jdk "OracleJDK11"
    }

    stages {
        stage('Fetch Code') {
            steps {
                git branch: 'main',
                credentialsId: 'hansebastian_github',
                url: 'https://github.com/hkhcoder/vprofile-project'

            }
        }

        stage('Build') {
            steps {
                sh 'mvn install -DskipTests'
            }
            
            post {
                success {
                    echo 'Archiving artifacts now!'
                    archiveArtifacts artifacts: '**/*.war'
                }
            }
        }

        stage('Test') {
            steps {
                sh 'mvn test'
            }
        }

        // maven Checkstyle
        stage('Checkstyle Analysis') {
            steps {
                sh 'mvn checkstyle:checkstyle'
            }
        }
        // Sonar Scan!
        stage('Sonar Analysis') {
            environment {
                scannerHome = tool 'sonar4.7'
            }
            // Ngasi tau dimana test result locationnya
            steps {
                withSonarQubeEnv('sonar') {
                    sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''
                }
            }

        }
        // Check result pakai quality gate
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {   
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        // Upload Artifacts to Nexus
        stage ("Upload Artifacts to Nexus") {
            steps {
                nexusArtifactUploader (
                    nexusVersion: 'nexus3',
                    protocol: 'http',
                    nexusUrl: '192.168.56.135:8081/',
                    groupId: 'Test',
                    version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
                    repository: 'vprofile-repo',
                    credentialsId: 'NexusLogin',
                    artifacts: [
                        [
                            artifactId: 'vproapp',
                            classifier: '',
                            file: 'target/vprofile-v2.war',
                            type: 'war'
                        ]
                    ]
                )
            }
        }
    }
}